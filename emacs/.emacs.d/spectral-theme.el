;;; package --- Summary
;;; Commentary:
;;; Spectral theme for a colorful experience
;; Local Variables:
;; byte-compile-warnings: (not free-vars)
;; End:


;;; Code:
(deftheme spectral)

;; Generated by https://huey.design/ - starting color r=255, 0, 0, hue=12, tints=12, scaling=intensity
(defconst spectral-red-01 "#ffe2e2")
(defconst spectral-red-02 "#ffc5c5")
(defconst spectral-red-03 "#ffa6a6")
(defconst spectral-red-04 "#ff8484")
(defconst spectral-red-05 "#ff5d5d")
(defconst spectral-red-06 "#ff1414")
(defconst spectral-red-07 "#dd0000")
(defconst spectral-red-08 "#b90000")
(defconst spectral-red-09 "#970000")
(defconst spectral-red-10 "#760000")
(defconst spectral-red-11 "#560000")
(defconst spectral-red-12 "#390000")

(defconst spectral-orange-01 "#ffe5c2")
(defconst spectral-orange-02 "#ffc98a")
(defconst spectral-orange-03 "#ffab57")
(defconst spectral-orange-04 "#f09335")
(defconst spectral-orange-05 "#dc7c1d")
(defconst spectral-orange-06 "#c5680c")
(defconst spectral-orange-07 "#ac5601")
(defconst spectral-orange-08 "#974100")
(defconst spectral-orange-09 "#812e00")
(defconst spectral-orange-10 "#681d00")
(defconst spectral-orange-11 "#4e1000")
(defconst spectral-orange-12 "#340700")

(defconst spectral-yellow-00  "#d7ff00")
(defconst spectral-yellow-00a "#FFEF00")
(defconst spectral-yellow-00b "#FFFF00")
(defconst spectral-yellow-01 "#eded9a")
(defconst spectral-yellow-02 "#d9d95f")
(defconst spectral-yellow-03 "#c4c439")
(defconst spectral-yellow-04 "#afaf1f")
(defconst spectral-yellow-05 "#9a9a0e")
(defconst spectral-yellow-06 "#868602")
(defconst spectral-yellow-07 "#727200")
(defconst spectral-yellow-08 "#5f5f00")
(defconst spectral-yellow-09 "#4c4c00")
(defconst spectral-yellow-10 "#3a3a00")
(defconst spectral-yellow-11 "#292900")
(defconst spectral-yellow-12 "#191900")

(defconst spectral-chartreuse-01 "#adff59")
(defconst spectral-chartreuse-02 "#8ceb2e")
(defconst spectral-chartreuse-03 "#76d517")
(defconst spectral-chartreuse-04 "#63be08")
(defconst spectral-chartreuse-05 "#53a800")
(defconst spectral-chartreuse-06 "#3d9300")
(defconst spectral-chartreuse-07 "#2c7e00")
(defconst spectral-chartreuse-08 "#1e6a00")
(defconst spectral-chartreuse-09 "#135500")
(defconst spectral-chartreuse-10 "#0b4200")
(defconst spectral-chartreuse-11 "#052f00")
(defconst spectral-chartreuse-12 "#021d00")

(defconst spectral-green-tictac-green "#00ff87") ;; Reminds me of green tictacs
(defconst spectral-green-00 "#73fa7f")
(defconst spectral-green-01 "#9dff9d")
(defconst spectral-green-02 "#00f500")
(defconst spectral-green-03 "#00dc00")
(defconst spectral-green-04 "#00c500")
(defconst spectral-green-05 "#00ad00")
(defconst spectral-green-06 "#009600")
(defconst spectral-green-07 "#008000")
(defconst spectral-green-08 "#006b00")
(defconst spectral-green-09 "#005600")
(defconst spectral-green-10 "#004200")
(defconst spectral-green-11 "#002f00")
(defconst spectral-green-12 "#001d00")

(defconst spectral-springgreen-01 "#8affc9")
(defconst spectral-springgreen-02 "#35f093")
(defconst spectral-springgreen-03 "#1bd97a")
(defconst spectral-springgreen-04 "#0bc266")
(defconst spectral-springgreen-05 "#00ab56")
(defconst spectral-springgreen-06 "#00953f")
(defconst spectral-springgreen-07 "#00802d")
(defconst spectral-springgreen-08 "#006a1e")
(defconst spectral-springgreen-09 "#005613")
(defconst spectral-springgreen-10 "#00420b")
(defconst spectral-springgreen-11 "#002f05")
(defconst spectral-springgreen-12 "#001d02")

(defconst spectral-cyan-01 "#b6f4f4")
(defconst spectral-cyan-02 "#7ae4e4")
(defconst spectral-cyan-03 "#4dd0d0")
(defconst spectral-cyan-04 "#2dbbbb")
(defconst spectral-cyan-05 "#17a5a5")
(defconst spectral-cyan-06 "#089090")
(defconst spectral-cyan-07 "#007b7b")
(defconst spectral-cyan-08 "#006666")
(defconst spectral-cyan-09 "#005252")
(defconst spectral-cyan-10 "#003f3f")
(defconst spectral-cyan-11 "#002d2d")
(defconst spectral-cyan-12 "#001c1c")

(defconst spectral-azure-00 "#11FFEE") ;; Fluorescent Blue
(defconst spectral-azure-01 "#d2ecff")
(defconst spectral-azure-02 "#a8d9ff")
(defconst spectral-azure-03 "#80c4ff")
(defconst spectral-azure-04 "#5baeff")
(defconst spectral-azure-05 "#3c98f4")
(defconst spectral-azure-06 "#2382e1")
(defconst spectral-azure-07 "#0f6dcb")
(defconst spectral-azure-08 "#0259b0")
(defconst spectral-azure-09 "#00449b")
(defconst spectral-azure-10 "#003084")
(defconst spectral-azure-11 "#001e6a")
(defconst spectral-azure-12 "#000f4c")

(defconst spectral-blue-01 "#e7e7ff")
(defconst spectral-blue-02 "#cfcfff")
(defconst spectral-blue-03 "#b7b7ff")
(defconst spectral-blue-04 "#9f9fff")
(defconst spectral-blue-05 "#8787ff")
(defconst spectral-blue-06 "#6e6eff")
(defconst spectral-blue-07 "#5454ff")
(defconst spectral-blue-08 "#3333ff")
(defconst spectral-blue-09 "#0000f4")
(defconst spectral-blue-10 "#0000c0")
(defconst spectral-blue-11 "#00008f")
(defconst spectral-blue-12 "#000061")
(defconst spectral-blue-13 "#000020")

(defconst spectral-violet-01 "#f3e3ff")
(defconst spectral-violet-02 "#e7c7ff")
(defconst spectral-violet-03 "#daabff")
(defconst spectral-violet-04 "#cc8fff")
(defconst spectral-violet-05 "#bc71ff")
(defconst spectral-violet-06 "#a953fe")
(defconst spectral-violet-07 "#9437f1")
(defconst spectral-violet-08 "#7c1ddc")
(defconst spectral-violet-09 "#6308be")
(defconst spectral-violet-10 "#48009e")
(defconst spectral-violet-11 "#2b007d")
(defconst spectral-violet-12 "#140058")

(defconst spectral-magenta-01 "#fbe1fb")
(defconst spectral-magenta-02 "#f6c2f6")
(defconst spectral-magenta-03 "#f0a4ef")
(defconst spectral-magenta-04 "#e885e7")
(defconst spectral-magenta-05 "#dc66db")
(defconst spectral-magenta-06 "#cd47cc")
(defconst spectral-magenta-07 "#b92ab8")
(defconst spectral-magenta-08 "#a0129f")
(defconst spectral-magenta-09 "#840283")
(defconst spectral-magenta-10 "#6b0058")
(defconst spectral-magenta-11 "#510036")
(defconst spectral-magenta-12 "#36001d")

(defconst spectral-rose-01 "#ffe0f2")
(defconst spectral-rose-02 "#ffc1e4")
(defconst spectral-rose-03 "#ffa0d5")
(defconst spectral-rose-04 "#ff7cc2")
(defconst spectral-rose-05 "#fe52a8")
(defconst spectral-rose-06 "#ec2f8e")
(defconst spectral-rose-07 "#d21473")
(defconst spectral-rose-08 "#b3035b")
(defconst spectral-rose-09 "#93003d")
(defconst spectral-rose-10 "#740024")
(defconst spectral-rose-11 "#550013")
(defconst spectral-rose-12 "#380008")

(defconst spectral-background-00 "#000000")
(defconst spectral-background-01 "#080808")
(defconst spectral-background-02 "#101010")
(defconst spectral-background-03 "#181818")
(defconst spectral-background-04 "#202020")
(defconst spectral-background-05 "#282828")
(defconst spectral-background-06 "#303030")
(defconst spectral-background-07 "#383838")
(defconst spectral-background-08 "#404040")
(defconst spectral-background-09 "#484848")
(defconst spectral-background-10 "#505050")
(defconst spectral-background-11 "#585858")
(defconst spectral-background-12 "#606060")
(defconst spectral-background-13 "#686868")
(defconst spectral-background-14 "#707070")
(defconst spectral-background-15 "#787878")
(defconst spectral-background-16 "#808080")
(defconst spectral-background-17 "#888888")
(defconst spectral-background-18 "#909090")
(defconst spectral-background-19 "#989898")
(defconst spectral-background-20 "#A0A0A0")
(defconst spectral-background-21 "#A8A8A8")
(defconst spectral-background-22 "#B0B0B0")
(defconst spectral-background-23 "#B8B8B8")
(defconst spectral-background-24 "#C0C0C0")
(defconst spectral-background-25 "#C8C8C8")
(defconst spectral-background-26 "#D0D0D0")
(defconst spectral-background-27 "#D8D8D8")
(defconst spectral-background-28 "#E0E0E0")
(defconst spectral-background-29 "#E8E8E8")
(defconst spectral-background-30 "#F0F0F0")
(defconst spectral-background-31 "#F8F8F8")
(defconst spectral-background-32 "#FFFFFF")

(defconst spectral-foreground-00 "#FFFFFF")
(defconst spectral-foreground-01 "#F8F8F8")
(defconst spectral-foreground-02 "#F0F0F0")
(defconst spectral-foreground-03 "#E8E8E8")
(defconst spectral-foreground-04 "#E0E0E0")
(defconst spectral-foreground-05 "#D8D8D8")
(defconst spectral-foreground-06 "#D0D0D0")
(defconst spectral-foreground-07 "#C8C8C8")
(defconst spectral-foreground-08 "#C0C0C0")
(defconst spectral-foreground-09 "#B8B8B8")
(defconst spectral-foreground-10 "#B0B0B0")
(defconst spectral-foreground-11 "#A8A8A8")
(defconst spectral-foreground-12 "#A0A0A0")
(defconst spectral-foreground-13 "#989898")
(defconst spectral-foreground-14 "#909090")
(defconst spectral-foreground-15 "#888888")
(defconst spectral-foreground-16 "#808080")
(defconst spectral-foreground-17 "#787878")
(defconst spectral-foreground-18 "#707070")
(defconst spectral-foreground-19 "#686868")
(defconst spectral-foreground-20 "#606060")
(defconst spectral-foreground-21 "#585858")
(defconst spectral-foreground-22 "#505050")
(defconst spectral-foreground-23 "#484848")
(defconst spectral-foreground-24 "#404040")
(defconst spectral-foreground-25 "#383838")
(defconst spectral-foreground-26 "#303030")
(defconst spectral-foreground-27 "#282828")
(defconst spectral-foreground-28 "#202020")
(defconst spectral-foreground-29 "#181818")
(defconst spectral-foreground-30 "#101010")
(defconst spectral-foreground-31 "#080808")
(defconst spectral-foreground-32 "#000000")

(defconst spectral-color-palette-names '("red" "orange" "yellow" "chartreuse" "green" "springgreen" "cyan" "azure" "blue" "violet" "magenta" "rose"))

(defun eej/create-color-name (idx offset)
  (symbol-value (intern
                 (format "spectral-%s-%02d"
                         (nth (mod idx (length spectral-color-palette-names)) spectral-color-palette-names)
                         (+ (mod idx 5) offset)))))

(defun eej/project-hash-value ()
  "Return an integer that is a distinct value for where this project is located."
  (let* ((project-dir (nth 2 (project-current nil (file-truename default-directory))))
         (project-hash (string-to-number (md5 (concat (system-name) project-dir)) 16)))
    project-hash))

(defun eej/modify-modeline-face ()
  "Modifies the modeline face for the git project name based on a hash value."
  (let ((hash (eej/project-hash-value)))
    (face-remap-add-relative 'spectral-modeline-project-branch-face
                             `(:foreground ,(eej/create-color-name hash 0)
                                           :background ,(eej/create-color-name (/ hash 7) 8)))))

(add-hook 'find-file-hook #'eej/modify-modeline-face)

(defface org-todo-todo nil "The org mode face for TODO." :group 'spectral-modeline-face)
(defface org-todo-started nil "The org mode face for STARTED."  :group 'spectral-modeline-face)
(defface org-todo-done nil "The org mode face for DONE."  :group 'spectral-modeline-face)
(defface org-todo-note nil "The org mode face for NOTE."  :group 'spectral-modeline-face)
(defface org-todo-next nil "The org mode face for NEXT."  :group 'spectral-modeline-face)
(defface org-todo-waiting nil "The org mode face for WAITING."  :group 'spectral-modeline-face)

(custom-theme-set-faces
 'spectral
 `(bold                         ((t (:bold t))))
 `(bold-italic                  ((t (:bold t :italic t))))
 `(border-glyph                 ((t (nil))))
 `(default                      ((t (:foreground ,spectral-foreground-00 :background ,spectral-background-00))))
 `(fringe                       ((t (:background ,spectral-background-00))))
 `(buffers-tab                  ((t (:foreground ,spectral-foreground-00 :background ,spectral-background-00))))

 `(text-cursor                  ((t (:foreground ,spectral-foreground-32 :background ,spectral-yellow-00b))))
 `(region                       ((t (:inverse-video t))))

 `(italic                       ((t (nil))))
 `(left-margin                  ((t (nil))))
 `(toolbar                      ((t (nil))))
 `(menu                         ((t (:foreground ,spectral-foreground-05 :background ,spectral-background-08))))
 `(highlight                    ((t (:foreground ,spectral-foreground-00 :background ,spectral-background-08 :italic t :bold t :extend t))))

 ;; Faces related to commenting all get the same basic style
 `(font-lock-comment-delimiter-face    ((t (:foreground ,spectral-springgreen-01 :background ,spectral-background-02 :bold t))))
 `(font-lock-comment-face              ((t (:foreground ,spectral-springgreen-01 :background ,spectral-background-02 :italic t))))
 `(font-lock-doc-face                  ((t (:foreground ,spectral-springgreen-01 :background ,spectral-background-02 :italic t))))
 `(font-lock-doc-string-face           ((t (:foreground ,spectral-springgreen-01 :background ,spectral-background-02 :italic t))))
 `(font-lock-string-face               ((t (:foreground ,spectral-green-tictac-green :background ,spectral-background-00 :italic t))))
 `(font-lock-preprocessor-face         ((t (:foreground ,spectral-foreground-00 :background ,spectral-red-10))))
 `(font-lock-constant-face             ((t (:foreground ,spectral-violet-03 :background ,spectral-violet-10 :italic t))))
 `(font-lock-keyword-face              ((t (:foreground ,spectral-cyan-02 :background ,spectral-blue-11 :underline t))))
 `(font-lock-type-face                 ((t (:foreground ,spectral-foreground-15 :italic t))))
 `(font-lock-variable-name-face        ((t (:foreground ,spectral-foreground-00 :background ,spectral-background-03 :bold t))))
 `(font-lock-property-name-face        ((t (:inherit font-lock-variable-name-face))))

 ;; These two should be the same
 `(font-lock-variable-use-face         ((t (:foreground ,spectral-orange-01 :background ,spectral-background-00 :italic t))))
 `(font-lock-property-use-face         ((t (:inherit font-lock-variable-use-face))))
 `(font-lock-function-name-face        ((t (:foreground ,spectral-yellow-01 :background ,spectral-background-04))))
 `(font-lock-function-call-face        ((t (:foreground ,spectral-magenta-03 :italic t :bold nil))))

 ;; When is this one used? elisp-mode uses this for autoload in a comment, why?
 `(font-lock-warning-face              ((t (:foreground ,spectral-foreground-00 :background ,spectral-rose-06))))
 `(font-lock-negation-char-face        ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(font-lock-regexp-grouping-construct ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(font-lock-regexp-grouping-backslash ((t (:foreground ,spectral-green-01 :weight bold))))

 ;; property keywords in elisp, unused otherwise - maybe ease up on the foreground color?
 `(font-lock-builtin-face              ((t (:foreground ,spectral-foreground-10 :background ,spectral-violet-12 :italic t))))

 `(completions-highlight        ((t (:foreground ,spectral-magenta-01 :background ,spectral-rose-07))))

 ;; Portion of text typed in minibuffer completion - orderless faces after a space is typed
 `(completions-common-part      ((t (:foreground ,spectral-rose-06 :bold t :underline t))))
 `(completions-annotations      ((t (:foreground ,spectral-background-13))))

 `(orderless-match-face-0       ((t (:inherit completions-common-part))))
 `(orderless-match-face-1       ((t (:inherit completions-common-part))))
 `(orderless-match-face-2       ((t (:inherit completions-common-part))))
 `(orderless-match-face-3       ((t (:inherit completions-common-part))))

 ;; I think this face is used for the actual match portion of the text that's been typed in
 `(vertico-current              ((t (:inherit highlight))))
 `(vertico-indexed              ((t (:inherit font-lock-comment-face))))
 `(vertico-multiline            ((t (:inherit shadow))))
 `(vertico-group-title          ((t (:foreground ,spectral-yellow-00 :italic t :bold t))))
 `(vertico-group-separator      ((t (:strike-through t :foreground ,spectral-foreground-00))))

 ;; This captures the headline levels of org mode
 `(org-level-1                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-2                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-3                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-4                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-5                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-6                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-7                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))
 `(org-level-8                  ((t (:background ,spectral-foreground-32 :foreground ,spectral-foreground-00))))

 ;; Rename these to spectral
 `(spectral-modeline-saved-face ((t (:foreground ,spectral-green-01))))
 `(spectral-modeline-modified-face ((t (:foreground ,spectral-red-06))))
 `(spectral-modeline-project-branch-face ((t (:foreground ,spectral-magenta-04))))
 `(spectral-modeline-buffer-identification-face ((t :foreground ,spectral-background-00 :background ,spectral-foreground-00 :bold t)))
 `(spectral-modeline-org-task-active-face ((t :foreground ,spectral-foreground-00 :background ,spectral-green-09 :italic t)))
 `(spectral-modeline-org-no-task-active-face ((t :foreground ,spectral-foreground-00 :background ,spectral-red-08)))

 ;; Not reviewed or verified
 `(compilation-column-number ((t (:foreground ,spectral-yellow-01))))
 `(compilation-line-number ((t (:foreground ,spectral-red-06))))
 `(compilation-error ((t (:background ,spectral-red-08 :foreground ,spectral-foreground-00 :bold t :italic t))))
 `(compilation-info ((t (:foreground ,spectral-springgreen-04 :underline t))))
 `(compilation-mode-line-exit ((t (:foreground ,spectral-springgreen-02 :weight bold))))
 `(compilation-mode-line-fail ((t (:foreground ,spectral-red-01 :weight bold))))
 `(compilation-mode-line-run ((t (:foreground ,spectral-yellow-01 :weight bold))))

 `(match ((t (:background ,spectral-background-04 :foreground ,spectral-orange-04 :weight bold))))
 `(Info-quoted ((t (:inherit font-lock-constant-face))))
 `(consult-file ((t (:foreground ,spectral-foreground-00))))
 `(consult-bookmark ((t (:foreground, spectral-foreground-00))))
 `(consult-highlight-match ((t (:foreground ,spectral-blue-09))))
 `(consult-highlight-mark ((t (:foreground ,spectral-blue-09))))

 ;;377:(defface consult-preview-line
 ;;381:(defface consult-highlight-match
 ;;386:(defface consult-highlight-mark
 ;;392:(defface consult-preview-match
 ;;396:(defface consult-preview-insertion
 ;;401:(defface consult-narrow-indicator
 ;;405:(defface consult-async-running
 ;;409:(defface consult-async-finished
 ;;413:(defface consult-async-failed
 ;;417:(defface consult-async-split
 ;;421:(defface consult-help
 ;;425:(defface consult-key
 ;;429:(defface consult-line-number
 ;;437:(defface consult-grep-context
 ;;441:(defface consult-bookmark
 ;;445:(defface consult-buffer
 ;;449:(defface consult-line-number-prefix
 ;;453:(defface consult-line-number-wrapped
 ;;457:(defface consult-separator

 ;;163:(defface marginalia-key
 ;;167:(defface marginalia-type
 ;;171:(defface marginalia-char
 ;;175:(defface marginalia-lighter
 ;;179:(defface marginalia-on
 ;;183:(defface marginalia-off
 ;;187:(defface marginalia-documentation
 ;;191:(defface marginalia-value
 ;;195:(defface marginalia-null
 ;;199:(defface marginalia-true
 ;;203:(defface marginalia-function
 ;;207:(defface marginalia-symbol
 ;;211:(defface marginalia-list
 ;;215:(defface marginalia-mode
 ;;219:(defface marginalia-date
 ;;223:(defface marginalia-version
 ;;227:(defface marginalia-archive
 ;;231:(defface marginalia-installed
 ;;239:(defface marginalia-number
 ;;243:(defface marginalia-string

 `(marginalia-modified ((t (:foreground ,spectral-rose-03))))  ;; "Face used to highlight buffer modification indicators."
 `(marginalia-size ((t (:foreground ,spectral-magenta-03))))   ;; "Face used to highlight sizes."
 ;;251:(defface marginalia-file-name
 ;;255:(defface marginalia-file-owner

 `(marginalia-date ((t (:foreground ,spectral-azure-05))))
 `(marginalia-documentation ((t (:foreground ,spectral-yellow-03))))
 `(marginalia-file-priv-no ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-dir ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-link ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-read ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-write ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-exec ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-other ((t (:foreground ,spectral-rose-07))))
 `(marginalia-file-priv-rare ((t (:foreground ,spectral-rose-07))))
 ;;

 ;; isearch faces
 `(isearch         ((t (:background ,spectral-rose-05 :foreground ,spectral-background-00 :underline t :bold t))))
 `(lazy-highlight  ((t (:foreground ,spectral-rose-05 :background ,spectral-background-00))))
 `(isearch-fail    ((t (:foreground ,spectral-red-03 :background ,spectral-red-09 :bold t))))

 `(linum ((t (:foreground ,spectral-foreground-10 :background ,spectral-background-00 ))))
 `(line-number ((t (:foreground ,spectral-foreground-26 :background ,spectral-background-01))))
 `(line-number-current-line ((t (:foreground ,spectral-foreground-00 :background ,spectral-background-01 :underline t :bold t))))

 `(minibuffer-prompt ((t (:foreground ,spectral-yellow-01))))

 ;; This is still used - fold it in better...
 `(mode-line ((t (:background ,spectral-background-09))))
 `(mode-line-inactive ((t (:foreground ,spectral-foreground-20 :background ,spectral-background-03))))

 `(secondary-selection ((t (:background ,spectral-background-12))))
 `(trailing-whitespace ((t (:background ,spectral-rose-01))))
 `(vertical-border ((t (:foreground ,spectral-foreground-05))))

   ;;; text in the git commit buffer with magit
 `(git-commit-summary ((t (:foreground ,spectral-foreground-00 :background ,spectral-background-00))))
 `(git-rebase-hash ((t (:foreground, spectral-orange-04))))

 `(diff-added          ((t (:background ,spectral-green-10 :foreground ,spectral-green-01))))
 `(diff-changed        ((t (:background ,spectral-yellow-10 :foreground ,spectral-yellow-04))))
 `(diff-removed        ((t (:background ,spectral-red-02 :foreground ,spectral-red-08))))

 `(diff-refine-added   ((t (:foreground ,spectral-foreground-00 :background ,spectral-green-05 :italic t :bold t))))
 `(diff-refine-change  ((t (:foreground ,spectral-foreground-00 :background ,spectral-yellow-00b :italic t :bold t))))
 `(diff-refine-removed ((t (:foreground ,spectral-foreground-00 :background ,spectral-red-06 :italic t :bold t))))

 `(dired-async-failures ((t (:foreground ,spectral-red-01 :weight bold))))
 `(dired-async-message ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(dired-async-mode-message ((t (:foreground ,spectral-yellow-01))))

 `(flymake-error    ((t (:foreground ,spectral-red-03 :background ,spectral-red-10 :underline t :bold t))))
 `(flymake-warning  ((t (:foreground ,spectral-orange-06 :underline t))))
 `(flymake-infoline ((t (:foreground ,spectral-blue-03 :bacgrkound ,spectral-blue-10))))

 `(ack-separator ((t (:foreground ,spectral-foreground-05))))
 `(ack-file ((t (:foreground ,spectral-azure-03))))
 `(ack-line ((t (:foreground ,spectral-yellow-01))))
 `(ack-match ((t (:foreground ,spectral-orange-04 :background ,spectral-background-04 :weight bold))))

;;;;; magit
;;;;;; headings and diffs
 `(magit-item-highlight   ((t (:inherit region))))

 `(magit-section-highlight           ((t (:background ,spectral-foreground-32)))) ;; Not sure if I like the highlight line or not
 `(magit-section-heading             ((t (:underline t :bold t))))
 `(magit-section-heading-selection   ((t (:foreground ,spectral-orange-04 :bold t))))

 ;; This is the unchanged text that provides context in a diff - so a grey is good
 `(magit-diff-context-highlight      ((t (:foreground ,spectral-foreground-24))))
 `(magit-diff-context ((t (:foreground ,spectral-foreground-28))))

 ;; Faces for when it does have the focus
 `(magit-diff-added-highlight ((t (:background ,spectral-green-09 :foreground ,spectral-foreground-06))))
 `(magit-diff-removed-highlight ((t (:background ,spectral-red-10 :foreground ,spectral-foreground-06))))

 `(magit-diff-added ((t (:background ,spectral-green-09 :foreground ,spectral-foreground-17))))
 `(magit-diff-removed ((t (:background ,spectral-red-10 :foreground ,spectral-foreground-17))))

 `(magit-diff-file-heading           ((t (:foreground ,spectral-green-01 :bold t))))  ;; filename in the diff?
 `(magit-diff-file-heading-highlight ((t (:foregorund ,spectral-orange-03 :backround ,spectral-foreground-32 :bold t))))
 `(magit-diff-file-heading-selection ((t (:foreground ,spectral-red-04 :background ,spectral-foreground-32 :bold t))))

 `(magit-diff-hunk-heading           ((t (:foreground ,spectral-background-14 :background ,spectral-background-04 ))))
 `(magit-diff-hunk-heading-highlight ((t (:foreground ,spectral-azure-05 :background ,spectral-background-04))))
 `(magit-diff-hunk-heading-selection ((t (:foreground ,spectral-azure-05 :background ,spectral-background-04))))

 ;; When selecting lines in a diff hunk, this adjusts the diff hunk context line @@ ab, cd @@
 `(magit-diff-lines-heading          ((t (:foreground ,spectral-azure-05 :background ,spectral-background-04))))

 `(magit-diff-hunk-region           ((t (:inverse-video t))))

 `(magit-diffstat-added   ((t (:foreground ,spectral-green-02))))
 `(magit-diffstat-removed ((t (:foreground ,spectral-red-02))))

;;;;;; process
 `(magit-process-ok    ((t (:foreground ,spectral-green-01  :weight bold))))
 `(magit-process-ng    ((t (:foreground ,spectral-red-01    :weight bold))))

;;;;;; log
 `(magit-log-author    ((t (:foreground ,spectral-azure-03))))
 `(magit-log-date      ((t (:foreground ,spectral-green-01))))
 `(magit-log-graph     ((t (:foreground ,spectral-foreground-00))))

;;;;;; sequence
 `(magit-sequence-pick ((t (:foreground ,spectral-yellow-05))))
 `(magit-sequence-stop ((t (:foreground ,spectral-green-01))))
 `(magit-sequence-part ((t (:foreground ,spectral-yellow-01))))
 `(magit-sequence-head ((t (:foreground ,spectral-azure-03))))
 `(magit-sequence-drop ((t (:foreground ,spectral-red-03))))
 `(magit-sequence-done ((t (:foreground ,spectral-background-13))))
 `(magit-sequence-onto ((t (:foreground ,spectral-background-13))))

;;;;;; bisect
 `(magit-bisect-good ((t (:foreground ,spectral-green-01))))
 `(magit-bisect-skip ((t (:foreground ,spectral-yellow-01))))
 `(magit-bisect-bad  ((t (:foreground ,spectral-red-01))))
;;;;;; blame
 `(magit-blame-heading ((t (:background ,spectral-background-04 :foreground ,spectral-springgreen-04))))
 `(magit-blame-hash    ((t (:background ,spectral-background-04 :foreground ,spectral-springgreen-04))))
 `(magit-blame-name    ((t (:background ,spectral-background-04 :foreground ,spectral-orange-04))))
 `(magit-blame-date    ((t (:background ,spectral-background-04 :foreground ,spectral-orange-04))))
 `(magit-blame-summary ((t (:background ,spectral-background-04 :foreground ,spectral-springgreen-04 :weight bold))))
;;;;;; references etc
 `(magit-dimmed         ((t (:foreground ,spectral-background-14))))
 `(magit-hash           ((t (:foreground ,spectral-azure-00))))
 `(magit-tag            ((t (:foreground ,spectral-blue-04 :italic t))))

 ;; TODO: Make this background unique?
 `(magit-branch-remote  ((t (:foreground ,spectral-background-00  :background ,spectral-green-04))))
 `(magit-branch-current ((t (:foreground ,spectral-foreground-00 :background ,spectral-green-06 :bold t))))
 `(magit-branch-local   ((t (:foreground ,spectral-green-tictac-green :underline t ))))
 `(magit-head           ((t (:foreground ,spectral-chartreuse-01 :background ,spectral-foreground-32 :weight bold))))

 `(magit-refname        ((t (:background ,spectral-background-12 :foreground ,spectral-foreground-05 :weight bold))))
 `(magit-refname-stash  ((t (:background ,spectral-background-12 :foreground ,spectral-foreground-05 :weight bold))))
 `(magit-refname-wip    ((t (:background ,spectral-background-12 :foreground ,spectral-foreground-05 :weight bold))))
 `(magit-signature-good      ((t (:foreground ,spectral-green-01))))
 `(magit-signature-bad       ((t (:foreground ,spectral-red-01))))
 `(magit-signature-untrusted ((t (:foreground ,spectral-yellow-01))))
 `(magit-signature-expired   ((t (:foreground ,spectral-red-06))))
 `(magit-signature-revoked   ((t (:foreground ,spectral-red-06))))
 '(magit-signature-error     ((t (:inherit    magit-signature-bad))))
 `(magit-cherry-unmatched    ((t (:foreground ,spectral-cyan-02))))
 `(magit-cherry-equivalent   ((t (:foreground ,spectral-magenta-03))))
 `(magit-reflog-commit       ((t (:foreground ,spectral-green-01))))
 `(magit-reflog-amend        ((t (:foreground ,spectral-magenta-03))))
 `(magit-reflog-merge        ((t (:foreground ,spectral-green-01))))
 `(magit-reflog-checkout     ((t (:foreground ,spectral-azure-03))))
 `(magit-reflog-reset        ((t (:foreground ,spectral-red-01))))
 `(magit-reflog-rebase       ((t (:foreground ,spectral-magenta-03))))
 `(magit-reflog-cherry-pick  ((t (:foreground ,spectral-green-01))))
 `(magit-reflog-remote       ((t (:foreground ,spectral-cyan-02))))
 `(magit-reflog-other        ((t (:foreground ,spectral-cyan-02))))

 `(message-cited-text ((t (:inherit font-lock-comment-face))))
 `(message-header-name ((t (:foreground ,spectral-springgreen-01))))
 `(message-header-other ((t (:foreground ,spectral-green-01))))
 `(message-header-to ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(message-header-cc ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(message-header-newsgroups ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(message-header-subject ((t (:foreground ,spectral-orange-04 :weight bold))))
 `(message-header-xheader ((t (:foreground ,spectral-green-01))))
 `(message-mml ((t (:foreground ,spectral-yellow-01 :weight bold))))
 `(message-separator ((t (:inherit font-lock-comment-face))))

   ;;; org mode goodies
 `(org-agenda-date-today ((t (:foreground ,spectral-foreground-00 :slant italic :weight bold))) t)
 `(org-agenda-clocking ((t (:foreground ,spectral-springgreen-02 :background, spectral-springgreen-10))))
 `(org-agenda-structure ((t (:foreground ,spectral-yellow-00b :underline t))))
 `(org-archived ((t (:foreground ,spectral-foreground-05 :weight bold))))
 `(org-checkbox ((t (:background ,spectral-background-12 :foreground ,spectral-foreground-00
                                 :box (:line-width 1 :style released-button)))))
 `(org-date ((t (:foreground ,spectral-azure-03 :underline t))))
 `(org-deadline-announce ((t (:foreground ,spectral-red-04))))
 `(org-formula ((t (:foreground ,spectral-yellow-05))))
 `(org-headline-todo ((t :(:foreground ,spectral-foreground-00 :bold t))))
 `(org-headline-done ((t (:foreground ,spectral-foreground-12))))
 `(org-hide ((t (:foreground ,spectral-background-04))))
 `(org-link ((t (:foreground ,spectral-yellow-05 :underline t))))
 `(org-scheduled ((t (:foreground ,spectral-springgreen-04))))
 `(org-scheduled-previously ((t (:foreground ,spectral-red-01))))
 `(org-scheduled-today ((t (:foreground ,spectral-blue-04))))
 `(org-sexp-date ((t (:foreground ,spectral-blue-04 :underline t))))
 `(org-special-keyword ((t (:inherit font-lock-comment-face))))
 `(org-table ((t (:foreground ,spectral-azure-03 ))))
 `(org-table-row ((t (:foreground ,spectral-azure-08 ))))
 `(org-table-header ((t (:foreground ,spectral-azure-10 ))))
 `(org-tag ((t (:weight bold :weight bold))))
 `(org-time-grid ((t (:foreground ,spectral-orange-04))))

 `(org-todo-todo ((t (:foreground ,spectral-foreground-00 :background ,spectral-red-09 :weight bold))))
 `(org-todo ((t (:inherit org-todo-todo))))
 `(org-todo-started ((t (:foreground ,spectral-foreground-00 :background ,spectral-green-08 :weight bold))))
 `(org-todo-done ((t (:foreground ,spectral-foreground-00 :background ,spectral-blue-09))))
 `(org-done ((t (:inherit org-todo-done))))
 `(org-todo-note ((t (:foreground ,spectral-chartreuse-02 :underline t))))
 `(org-todo-next ((t (:foreground ,spectral-yellow-00b :weight bold))))
 `(org-todo-waiting ((t (:foreground ,spectral-orange-05 ))))

 `(org-upcoming-deadline ((t (:inherit font-lock-keyword-face))))
 `(org-warning ((t (:weight bold :foreground ,spectral-red-05 :weight bold :underline nil))))
 `(org-column ((t (:background ,spectral-background-04))))
 `(org-column-title ((t (:background ,spectral-background-04 :underline t :weight bold))))
 `(org-mode-line-clock ((t (:foreground ,spectral-foreground-05 :background ,spectral-background-04))))
 `(org-mode-line-clock-overrun ((t (:foreground ,spectral-background-08 :background ,spectral-red-04))))
 `(org-ellipsis ((t (:foreground ,spectral-yellow-04 :underline t))))
 `(org-footnote ((t (:foreground ,spectral-cyan-02 :underline t))))
 `(org-document-title ((t (:foreground ,spectral-azure-03))))
 `(org-document-info ((t (:foreground ,spectral-azure-03))))
 `(org-habit-ready-face ((t :background ,spectral-green-01)))
 `(org-habit-alert-face ((t :background ,spectral-yellow-04 :foreground ,spectral-background-08)))
 `(org-habit-clear-face ((t :background ,spectral-cyan-08)))
 `(org-habit-overdue-face ((t :background ,spectral-red-09)))
 `(org-habit-clear-future-face ((t :background ,spectral-cyan-03)))
 `(org-habit-ready-future-face ((t :background ,spectral-chartreuse-01)))
 `(org-habit-alert-future-face ((t :background ,spectral-yellow-05 :foreground ,spectral-background-08)))
 `(org-habit-overdue-future-face ((t :background ,spectral-red-10)))
 `(org-super-agenda-header ((t :inherit org-agenda-structure :underline t)))
 `(org-agenda-dimmed-todo-face ((t :foreground ,spectral-foreground-20 :italic t)))

 ;; For fun? https://colordesigner.io/gradient-generator and https://huey.design/
 ;; huey.design - starting 255, 0, 0, scaling mode: lightness
 `(rainbow-delimiters-depth-1-face ((t ( :foreground ,spectral-azure-02 :background ,spectral-azure-12 :bold t))))
 `(rainbow-delimiters-depth-2-face ((t ( :foreground ,spectral-red-02 :background ,spectral-red-12 ))))
 `(rainbow-delimiters-depth-3-face ((t ( :foreground ,spectral-yellow-00 :background ,spectral-yellow-10 :bold t))))
 `(rainbow-delimiters-depth-4-face ((t ( :foreground ,spectral-green-02 :background ,spectral-green-12 ))))
 `(rainbow-delimiters-depth-5-face ((t ( :foreground ,spectral-blue-03 :background ,spectral-blue-10 :bold t :overline t))))
 `(rainbow-delimiters-depth-6-face ((t ( :foreground ,spectral-magenta-03 :background ,spectral-magenta-12 ))))
 `(rainbow-delimiters-depth-7-face ((t ( :foreground ,spectral-orange-02 :background ,spectral-orange-08 :bold t))))
 `(rainbow-delimiters-unmatched-face ((t (:bold t :foreground ,spectral-red-03 :background ,spectral-red-12))))

;;;;; re-builder
 `(reb-match-0 ((t (:foreground ,spectral-background-08 :background ,spectral-magenta-01))))
 `(reb-match-1 ((t (:foreground ,spectral-background-08 :background ,spectral-blue-01))))
 `(reb-match-2 ((t (:foreground ,spectral-background-08 :background ,spectral-orange-01))))
 `(reb-match-3 ((t (:foreground ,spectral-background-08 :background ,spectral-red-01))))

 `(rpm-spec-dir-face ((t (:foreground ,spectral-green-01))))
 `(rpm-spec-doc-face ((t (:foreground ,spectral-green-01))))
 `(rpm-spec-ghost-face ((t (:foreground ,spectral-red-01))))
 `(rpm-spec-macro-face ((t (:foreground ,spectral-yellow-01))))
 `(rpm-spec-obsolete-tag-face ((t (:foreground ,spectral-red-01))))
 `(rpm-spec-package-face ((t (:foreground ,spectral-red-01))))
 `(rpm-spec-section-face ((t (:foreground ,spectral-yellow-01))))
 `(rpm-spec-tag-face ((t (:foreground ,spectral-blue-01))))
 `(rpm-spec-var-face ((t (:foreground ,spectral-red-01))))

 `(show-paren-mismatch ((t (:foreground ,spectral-red-03 :background ,spectral-red-09 :weight bold))))
 `(show-paren-match ((t (:underline t :inverse-video t))))
 ;; Disabled the match expression piece - which is controlled by show-paren-style
 ;; because its just too noisy and it takes away from the parenthesis highlights
 `(show-paren-match-expression ((t (:background ,spectral-background-04))))

 `(whitespace-empty            ((t (:foreground ,spectral-foreground-22 :background ,spectral-background-01 :strike-through t))))
 `(whitespace-indentation      ((t (:inherit whitespace-empty))))
 `(whitespace-space            ((t (:inherit whitespace-empty))))
 `(whitespace-hspace           ((t (:inherit whitespace-empty))))
 `(whitespace-tab              ((t (:inherit whitespace-empty))))
 `(whitespace-newline          ((t (:inherit whitespace-empty))))
 `(whitespace-trailing         ((t (:inherit whitespace-empty))))
 `(whitespace-line             ((t (:inherit whitespace-empty))))
 `(whitespace-space-before-tab ((t (:inherit whitespace-empty))))
 `(whitespace-space-after-tab  ((t (:inherit whitespace-empty))))

 `(which-func ((t (:foreground ,spectral-magenta-06))))
 `(underline  ((nil (:underline nil)))))

(provide-theme 'spectral)
;;; spectral-theme.el ends here
